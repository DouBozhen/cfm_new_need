// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: force_master_pub.proto

#ifndef PROTOBUF_INCLUDED_force_5fmaster_5fpub_2eproto
#define PROTOBUF_INCLUDED_force_5fmaster_5fpub_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_force_5fmaster_5fpub_2eproto 

namespace protobuf_force_5fmaster_5fpub_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_force_5fmaster_5fpub_2eproto
namespace ForceMasterPub {
class CartPose;
class CartPoseDefaultTypeInternal;
extern CartPoseDefaultTypeInternal _CartPose_default_instance_;
class JointPosition;
class JointPositionDefaultTypeInternal;
extern JointPositionDefaultTypeInternal _JointPosition_default_instance_;
class PublishData;
class PublishDataDefaultTypeInternal;
extern PublishDataDefaultTypeInternal _PublishData_default_instance_;
}  // namespace ForceMasterPub
namespace google {
namespace protobuf {
template<> ::ForceMasterPub::CartPose* Arena::CreateMaybeMessage<::ForceMasterPub::CartPose>(Arena*);
template<> ::ForceMasterPub::JointPosition* Arena::CreateMaybeMessage<::ForceMasterPub::JointPosition>(Arena*);
template<> ::ForceMasterPub::PublishData* Arena::CreateMaybeMessage<::ForceMasterPub::PublishData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ForceMasterPub {

// ===================================================================

class PublishData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ForceMasterPub.PublishData) */ {
 public:
  PublishData();
  virtual ~PublishData();

  PublishData(const PublishData& from);

  inline PublishData& operator=(const PublishData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishData(PublishData&& from) noexcept
    : PublishData() {
    *this = ::std::move(from);
  }

  inline PublishData& operator=(PublishData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishData* internal_default_instance() {
    return reinterpret_cast<const PublishData*>(
               &_PublishData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PublishData* other);
  friend void swap(PublishData& a, PublishData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishData* New() const final {
    return CreateMaybeMessage<PublishData>(NULL);
  }

  PublishData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PublishData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PublishData& from);
  void MergeFrom(const PublishData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ForceMasterPub.JointPosition joint = 1;
  bool has_joint() const;
  void clear_joint();
  static const int kJointFieldNumber = 1;
  private:
  const ::ForceMasterPub::JointPosition& _internal_joint() const;
  public:
  const ::ForceMasterPub::JointPosition& joint() const;
  ::ForceMasterPub::JointPosition* release_joint();
  ::ForceMasterPub::JointPosition* mutable_joint();
  void set_allocated_joint(::ForceMasterPub::JointPosition* joint);

  // .ForceMasterPub.CartPose pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  private:
  const ::ForceMasterPub::CartPose& _internal_pose() const;
  public:
  const ::ForceMasterPub::CartPose& pose() const;
  ::ForceMasterPub::CartPose* release_pose();
  ::ForceMasterPub::CartPose* mutable_pose();
  void set_allocated_pose(::ForceMasterPub::CartPose* pose);

  // @@protoc_insertion_point(class_scope:ForceMasterPub.PublishData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ForceMasterPub::JointPosition* joint_;
  ::ForceMasterPub::CartPose* pose_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_force_5fmaster_5fpub_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JointPosition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ForceMasterPub.JointPosition) */ {
 public:
  JointPosition();
  virtual ~JointPosition();

  JointPosition(const JointPosition& from);

  inline JointPosition& operator=(const JointPosition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JointPosition(JointPosition&& from) noexcept
    : JointPosition() {
    *this = ::std::move(from);
  }

  inline JointPosition& operator=(JointPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JointPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointPosition* internal_default_instance() {
    return reinterpret_cast<const JointPosition*>(
               &_JointPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(JointPosition* other);
  friend void swap(JointPosition& a, JointPosition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JointPosition* New() const final {
    return CreateMaybeMessage<JointPosition>(NULL);
  }

  JointPosition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JointPosition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JointPosition& from);
  void MergeFrom(const JointPosition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointPosition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double joint = 2;
  int joint_size() const;
  void clear_joint();
  static const int kJointFieldNumber = 2;
  double joint(int index) const;
  void set_joint(int index, double value);
  void add_joint(double value);
  const ::google::protobuf::RepeatedField< double >&
      joint() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_joint();

  // int32 joint_num = 1;
  void clear_joint_num();
  static const int kJointNumFieldNumber = 1;
  ::google::protobuf::int32 joint_num() const;
  void set_joint_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ForceMasterPub.JointPosition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > joint_;
  mutable int _joint_cached_byte_size_;
  ::google::protobuf::int32 joint_num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_force_5fmaster_5fpub_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CartPose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ForceMasterPub.CartPose) */ {
 public:
  CartPose();
  virtual ~CartPose();

  CartPose(const CartPose& from);

  inline CartPose& operator=(const CartPose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CartPose(CartPose&& from) noexcept
    : CartPose() {
    *this = ::std::move(from);
  }

  inline CartPose& operator=(CartPose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CartPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CartPose* internal_default_instance() {
    return reinterpret_cast<const CartPose*>(
               &_CartPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CartPose* other);
  friend void swap(CartPose& a, CartPose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CartPose* New() const final {
    return CreateMaybeMessage<CartPose>(NULL);
  }

  CartPose* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CartPose>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CartPose& from);
  void MergeFrom(const CartPose& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CartPose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // double a = 4;
  void clear_a();
  static const int kAFieldNumber = 4;
  double a() const;
  void set_a(double value);

  // double b = 5;
  void clear_b();
  static const int kBFieldNumber = 5;
  double b() const;
  void set_b(double value);

  // double c = 6;
  void clear_c();
  static const int kCFieldNumber = 6;
  double c() const;
  void set_c(double value);

  // @@protoc_insertion_point(class_scope:ForceMasterPub.CartPose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  double a_;
  double b_;
  double c_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_force_5fmaster_5fpub_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PublishData

// .ForceMasterPub.JointPosition joint = 1;
inline bool PublishData::has_joint() const {
  return this != internal_default_instance() && joint_ != NULL;
}
inline void PublishData::clear_joint() {
  if (GetArenaNoVirtual() == NULL && joint_ != NULL) {
    delete joint_;
  }
  joint_ = NULL;
}
inline const ::ForceMasterPub::JointPosition& PublishData::_internal_joint() const {
  return *joint_;
}
inline const ::ForceMasterPub::JointPosition& PublishData::joint() const {
  const ::ForceMasterPub::JointPosition* p = joint_;
  // @@protoc_insertion_point(field_get:ForceMasterPub.PublishData.joint)
  return p != NULL ? *p : *reinterpret_cast<const ::ForceMasterPub::JointPosition*>(
      &::ForceMasterPub::_JointPosition_default_instance_);
}
inline ::ForceMasterPub::JointPosition* PublishData::release_joint() {
  // @@protoc_insertion_point(field_release:ForceMasterPub.PublishData.joint)
  
  ::ForceMasterPub::JointPosition* temp = joint_;
  joint_ = NULL;
  return temp;
}
inline ::ForceMasterPub::JointPosition* PublishData::mutable_joint() {
  
  if (joint_ == NULL) {
    auto* p = CreateMaybeMessage<::ForceMasterPub::JointPosition>(GetArenaNoVirtual());
    joint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ForceMasterPub.PublishData.joint)
  return joint_;
}
inline void PublishData::set_allocated_joint(::ForceMasterPub::JointPosition* joint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete joint_;
  }
  if (joint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      joint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, joint, submessage_arena);
    }
    
  } else {
    
  }
  joint_ = joint;
  // @@protoc_insertion_point(field_set_allocated:ForceMasterPub.PublishData.joint)
}

// .ForceMasterPub.CartPose pose = 2;
inline bool PublishData::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline void PublishData::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
inline const ::ForceMasterPub::CartPose& PublishData::_internal_pose() const {
  return *pose_;
}
inline const ::ForceMasterPub::CartPose& PublishData::pose() const {
  const ::ForceMasterPub::CartPose* p = pose_;
  // @@protoc_insertion_point(field_get:ForceMasterPub.PublishData.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::ForceMasterPub::CartPose*>(
      &::ForceMasterPub::_CartPose_default_instance_);
}
inline ::ForceMasterPub::CartPose* PublishData::release_pose() {
  // @@protoc_insertion_point(field_release:ForceMasterPub.PublishData.pose)
  
  ::ForceMasterPub::CartPose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::ForceMasterPub::CartPose* PublishData::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::ForceMasterPub::CartPose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ForceMasterPub.PublishData.pose)
  return pose_;
}
inline void PublishData::set_allocated_pose(::ForceMasterPub::CartPose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pose_;
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:ForceMasterPub.PublishData.pose)
}

// -------------------------------------------------------------------

// JointPosition

// int32 joint_num = 1;
inline void JointPosition::clear_joint_num() {
  joint_num_ = 0;
}
inline ::google::protobuf::int32 JointPosition::joint_num() const {
  // @@protoc_insertion_point(field_get:ForceMasterPub.JointPosition.joint_num)
  return joint_num_;
}
inline void JointPosition::set_joint_num(::google::protobuf::int32 value) {
  
  joint_num_ = value;
  // @@protoc_insertion_point(field_set:ForceMasterPub.JointPosition.joint_num)
}

// repeated double joint = 2;
inline int JointPosition::joint_size() const {
  return joint_.size();
}
inline void JointPosition::clear_joint() {
  joint_.Clear();
}
inline double JointPosition::joint(int index) const {
  // @@protoc_insertion_point(field_get:ForceMasterPub.JointPosition.joint)
  return joint_.Get(index);
}
inline void JointPosition::set_joint(int index, double value) {
  joint_.Set(index, value);
  // @@protoc_insertion_point(field_set:ForceMasterPub.JointPosition.joint)
}
inline void JointPosition::add_joint(double value) {
  joint_.Add(value);
  // @@protoc_insertion_point(field_add:ForceMasterPub.JointPosition.joint)
}
inline const ::google::protobuf::RepeatedField< double >&
JointPosition::joint() const {
  // @@protoc_insertion_point(field_list:ForceMasterPub.JointPosition.joint)
  return joint_;
}
inline ::google::protobuf::RepeatedField< double >*
JointPosition::mutable_joint() {
  // @@protoc_insertion_point(field_mutable_list:ForceMasterPub.JointPosition.joint)
  return &joint_;
}

// -------------------------------------------------------------------

// CartPose

// double x = 1;
inline void CartPose::clear_x() {
  x_ = 0;
}
inline double CartPose::x() const {
  // @@protoc_insertion_point(field_get:ForceMasterPub.CartPose.x)
  return x_;
}
inline void CartPose::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ForceMasterPub.CartPose.x)
}

// double y = 2;
inline void CartPose::clear_y() {
  y_ = 0;
}
inline double CartPose::y() const {
  // @@protoc_insertion_point(field_get:ForceMasterPub.CartPose.y)
  return y_;
}
inline void CartPose::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ForceMasterPub.CartPose.y)
}

// double z = 3;
inline void CartPose::clear_z() {
  z_ = 0;
}
inline double CartPose::z() const {
  // @@protoc_insertion_point(field_get:ForceMasterPub.CartPose.z)
  return z_;
}
inline void CartPose::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ForceMasterPub.CartPose.z)
}

// double a = 4;
inline void CartPose::clear_a() {
  a_ = 0;
}
inline double CartPose::a() const {
  // @@protoc_insertion_point(field_get:ForceMasterPub.CartPose.a)
  return a_;
}
inline void CartPose::set_a(double value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:ForceMasterPub.CartPose.a)
}

// double b = 5;
inline void CartPose::clear_b() {
  b_ = 0;
}
inline double CartPose::b() const {
  // @@protoc_insertion_point(field_get:ForceMasterPub.CartPose.b)
  return b_;
}
inline void CartPose::set_b(double value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:ForceMasterPub.CartPose.b)
}

// double c = 6;
inline void CartPose::clear_c() {
  c_ = 0;
}
inline double CartPose::c() const {
  // @@protoc_insertion_point(field_get:ForceMasterPub.CartPose.c)
  return c_;
}
inline void CartPose::set_c(double value) {
  
  c_ = value;
  // @@protoc_insertion_point(field_set:ForceMasterPub.CartPose.c)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ForceMasterPub

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_force_5fmaster_5fpub_2eproto
