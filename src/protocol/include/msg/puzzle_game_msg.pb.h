// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: puzzle_game_msg.proto

#ifndef PROTOBUF_INCLUDED_puzzle_5fgame_5fmsg_2eproto
#define PROTOBUF_INCLUDED_puzzle_5fgame_5fmsg_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_puzzle_5fgame_5fmsg_2eproto 

namespace protobuf_puzzle_5fgame_5fmsg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_puzzle_5fgame_5fmsg_2eproto
namespace PuzzleGameMsg {
class PlanarPoint;
class PlanarPointDefaultTypeInternal;
extern PlanarPointDefaultTypeInternal _PlanarPoint_default_instance_;
class Ubuntu2Unity;
class Ubuntu2UnityDefaultTypeInternal;
extern Ubuntu2UnityDefaultTypeInternal _Ubuntu2Unity_default_instance_;
class Unity2Ubuntu;
class Unity2UbuntuDefaultTypeInternal;
extern Unity2UbuntuDefaultTypeInternal _Unity2Ubuntu_default_instance_;
}  // namespace PuzzleGameMsg
namespace google {
namespace protobuf {
template<> ::PuzzleGameMsg::PlanarPoint* Arena::CreateMaybeMessage<::PuzzleGameMsg::PlanarPoint>(Arena*);
template<> ::PuzzleGameMsg::Ubuntu2Unity* Arena::CreateMaybeMessage<::PuzzleGameMsg::Ubuntu2Unity>(Arena*);
template<> ::PuzzleGameMsg::Unity2Ubuntu* Arena::CreateMaybeMessage<::PuzzleGameMsg::Unity2Ubuntu>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace PuzzleGameMsg {

enum TcpState {
  TCP_HANG = 0,
  TCP_UP = 1,
  TCP_DOWN = 2,
  TcpState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TcpState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TcpState_IsValid(int value);
const TcpState TcpState_MIN = TCP_HANG;
const TcpState TcpState_MAX = TCP_DOWN;
const int TcpState_ARRAYSIZE = TcpState_MAX + 1;

const ::google::protobuf::EnumDescriptor* TcpState_descriptor();
inline const ::std::string& TcpState_Name(TcpState value) {
  return ::google::protobuf::internal::NameOfEnum(
    TcpState_descriptor(), value);
}
inline bool TcpState_Parse(
    const ::std::string& name, TcpState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TcpState>(
    TcpState_descriptor(), name, value);
}
enum GameResult {
  GAMING = 0,
  WIN = 1,
  LOSE = 2,
  GameResult_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GameResult_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GameResult_IsValid(int value);
const GameResult GameResult_MIN = GAMING;
const GameResult GameResult_MAX = LOSE;
const int GameResult_ARRAYSIZE = GameResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameResult_descriptor();
inline const ::std::string& GameResult_Name(GameResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameResult_descriptor(), value);
}
inline bool GameResult_Parse(
    const ::std::string& name, GameResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameResult>(
    GameResult_descriptor(), name, value);
}
enum GameReplayState {
  PLAYING = 0,
  BACK = 1,
  REPLAY = 2,
  PAUSE = 3,
  GameReplayState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GameReplayState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GameReplayState_IsValid(int value);
const GameReplayState GameReplayState_MIN = PLAYING;
const GameReplayState GameReplayState_MAX = PAUSE;
const int GameReplayState_ARRAYSIZE = GameReplayState_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameReplayState_descriptor();
inline const ::std::string& GameReplayState_Name(GameReplayState value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameReplayState_descriptor(), value);
}
inline bool GameReplayState_Parse(
    const ::std::string& name, GameReplayState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameReplayState>(
    GameReplayState_descriptor(), name, value);
}
enum GameDeviceType {
  VR = 0,
  SCREEN = 1,
  GameDeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GameDeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GameDeviceType_IsValid(int value);
const GameDeviceType GameDeviceType_MIN = VR;
const GameDeviceType GameDeviceType_MAX = SCREEN;
const int GameDeviceType_ARRAYSIZE = GameDeviceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameDeviceType_descriptor();
inline const ::std::string& GameDeviceType_Name(GameDeviceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameDeviceType_descriptor(), value);
}
inline bool GameDeviceType_Parse(
    const ::std::string& name, GameDeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameDeviceType>(
    GameDeviceType_descriptor(), name, value);
}
// ===================================================================

class PlanarPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PuzzleGameMsg.PlanarPoint) */ {
 public:
  PlanarPoint();
  virtual ~PlanarPoint();

  PlanarPoint(const PlanarPoint& from);

  inline PlanarPoint& operator=(const PlanarPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlanarPoint(PlanarPoint&& from) noexcept
    : PlanarPoint() {
    *this = ::std::move(from);
  }

  inline PlanarPoint& operator=(PlanarPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanarPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanarPoint* internal_default_instance() {
    return reinterpret_cast<const PlanarPoint*>(
               &_PlanarPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PlanarPoint* other);
  friend void swap(PlanarPoint& a, PlanarPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlanarPoint* New() const final {
    return CreateMaybeMessage<PlanarPoint>(NULL);
  }

  PlanarPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlanarPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlanarPoint& from);
  void MergeFrom(const PlanarPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanarPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:PuzzleGameMsg.PlanarPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_puzzle_5fgame_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Unity2Ubuntu : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PuzzleGameMsg.Unity2Ubuntu) */ {
 public:
  Unity2Ubuntu();
  virtual ~Unity2Ubuntu();

  Unity2Ubuntu(const Unity2Ubuntu& from);

  inline Unity2Ubuntu& operator=(const Unity2Ubuntu& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Unity2Ubuntu(Unity2Ubuntu&& from) noexcept
    : Unity2Ubuntu() {
    *this = ::std::move(from);
  }

  inline Unity2Ubuntu& operator=(Unity2Ubuntu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Unity2Ubuntu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Unity2Ubuntu* internal_default_instance() {
    return reinterpret_cast<const Unity2Ubuntu*>(
               &_Unity2Ubuntu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Unity2Ubuntu* other);
  friend void swap(Unity2Ubuntu& a, Unity2Ubuntu& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Unity2Ubuntu* New() const final {
    return CreateMaybeMessage<Unity2Ubuntu>(NULL);
  }

  Unity2Ubuntu* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Unity2Ubuntu>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Unity2Ubuntu& from);
  void MergeFrom(const Unity2Ubuntu& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Unity2Ubuntu* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PuzzleGameMsg.PlanarPoint point_cut = 1;
  int point_cut_size() const;
  void clear_point_cut();
  static const int kPointCutFieldNumber = 1;
  ::PuzzleGameMsg::PlanarPoint* mutable_point_cut(int index);
  ::google::protobuf::RepeatedPtrField< ::PuzzleGameMsg::PlanarPoint >*
      mutable_point_cut();
  const ::PuzzleGameMsg::PlanarPoint& point_cut(int index) const;
  ::PuzzleGameMsg::PlanarPoint* add_point_cut();
  const ::google::protobuf::RepeatedPtrField< ::PuzzleGameMsg::PlanarPoint >&
      point_cut() const;

  // repeated .PuzzleGameMsg.PlanarPoint point_center = 2;
  int point_center_size() const;
  void clear_point_center();
  static const int kPointCenterFieldNumber = 2;
  ::PuzzleGameMsg::PlanarPoint* mutable_point_center(int index);
  ::google::protobuf::RepeatedPtrField< ::PuzzleGameMsg::PlanarPoint >*
      mutable_point_center();
  const ::PuzzleGameMsg::PlanarPoint& point_center(int index) const;
  ::PuzzleGameMsg::PlanarPoint* add_point_center();
  const ::google::protobuf::RepeatedPtrField< ::PuzzleGameMsg::PlanarPoint >&
      point_center() const;

  // repeated .PuzzleGameMsg.PlanarPoint point_target = 3;
  int point_target_size() const;
  void clear_point_target();
  static const int kPointTargetFieldNumber = 3;
  ::PuzzleGameMsg::PlanarPoint* mutable_point_target(int index);
  ::google::protobuf::RepeatedPtrField< ::PuzzleGameMsg::PlanarPoint >*
      mutable_point_target();
  const ::PuzzleGameMsg::PlanarPoint& point_target(int index) const;
  ::PuzzleGameMsg::PlanarPoint* add_point_target();
  const ::google::protobuf::RepeatedPtrField< ::PuzzleGameMsg::PlanarPoint >&
      point_target() const;

  // repeated int32 data = 4;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  ::google::protobuf::int32 data(int index) const;
  void set_data(int index, ::google::protobuf::int32 value);
  void add_data(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      data() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:PuzzleGameMsg.Unity2Ubuntu)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PuzzleGameMsg::PlanarPoint > point_cut_;
  ::google::protobuf::RepeatedPtrField< ::PuzzleGameMsg::PlanarPoint > point_center_;
  ::google::protobuf::RepeatedPtrField< ::PuzzleGameMsg::PlanarPoint > point_target_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > data_;
  mutable int _data_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_puzzle_5fgame_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ubuntu2Unity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PuzzleGameMsg.Ubuntu2Unity) */ {
 public:
  Ubuntu2Unity();
  virtual ~Ubuntu2Unity();

  Ubuntu2Unity(const Ubuntu2Unity& from);

  inline Ubuntu2Unity& operator=(const Ubuntu2Unity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ubuntu2Unity(Ubuntu2Unity&& from) noexcept
    : Ubuntu2Unity() {
    *this = ::std::move(from);
  }

  inline Ubuntu2Unity& operator=(Ubuntu2Unity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ubuntu2Unity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ubuntu2Unity* internal_default_instance() {
    return reinterpret_cast<const Ubuntu2Unity*>(
               &_Ubuntu2Unity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Ubuntu2Unity* other);
  friend void swap(Ubuntu2Unity& a, Ubuntu2Unity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ubuntu2Unity* New() const final {
    return CreateMaybeMessage<Ubuntu2Unity>(NULL);
  }

  Ubuntu2Unity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ubuntu2Unity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ubuntu2Unity& from);
  void MergeFrom(const Ubuntu2Unity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ubuntu2Unity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float tcp_pose = 1;
  int tcp_pose_size() const;
  void clear_tcp_pose();
  static const int kTcpPoseFieldNumber = 1;
  float tcp_pose(int index) const;
  void set_tcp_pose(int index, float value);
  void add_tcp_pose(float value);
  const ::google::protobuf::RepeatedField< float >&
      tcp_pose() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_tcp_pose();

  // .PuzzleGameMsg.TcpState tcp_state = 2;
  void clear_tcp_state();
  static const int kTcpStateFieldNumber = 2;
  ::PuzzleGameMsg::TcpState tcp_state() const;
  void set_tcp_state(::PuzzleGameMsg::TcpState value);

  // float sensor_force_z = 3;
  void clear_sensor_force_z();
  static const int kSensorForceZFieldNumber = 3;
  float sensor_force_z() const;
  void set_sensor_force_z(float value);

  // double game_length = 5;
  void clear_game_length();
  static const int kGameLengthFieldNumber = 5;
  double game_length() const;
  void set_game_length(double value);

  // .PuzzleGameMsg.GameResult game_result = 4;
  void clear_game_result();
  static const int kGameResultFieldNumber = 4;
  ::PuzzleGameMsg::GameResult game_result() const;
  void set_game_result(::PuzzleGameMsg::GameResult value);

  // float game_score = 6;
  void clear_game_score();
  static const int kGameScoreFieldNumber = 6;
  float game_score() const;
  void set_game_score(float value);

  // .PuzzleGameMsg.GameReplayState game_replay_state = 7;
  void clear_game_replay_state();
  static const int kGameReplayStateFieldNumber = 7;
  ::PuzzleGameMsg::GameReplayState game_replay_state() const;
  void set_game_replay_state(::PuzzleGameMsg::GameReplayState value);

  // .PuzzleGameMsg.GameDeviceType game_device = 8;
  void clear_game_device();
  static const int kGameDeviceFieldNumber = 8;
  ::PuzzleGameMsg::GameDeviceType game_device() const;
  void set_game_device(::PuzzleGameMsg::GameDeviceType value);

  // @@protoc_insertion_point(class_scope:PuzzleGameMsg.Ubuntu2Unity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > tcp_pose_;
  mutable int _tcp_pose_cached_byte_size_;
  int tcp_state_;
  float sensor_force_z_;
  double game_length_;
  int game_result_;
  float game_score_;
  int game_replay_state_;
  int game_device_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_puzzle_5fgame_5fmsg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlanarPoint

// float x = 1;
inline void PlanarPoint::clear_x() {
  x_ = 0;
}
inline float PlanarPoint::x() const {
  // @@protoc_insertion_point(field_get:PuzzleGameMsg.PlanarPoint.x)
  return x_;
}
inline void PlanarPoint::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:PuzzleGameMsg.PlanarPoint.x)
}

// float y = 2;
inline void PlanarPoint::clear_y() {
  y_ = 0;
}
inline float PlanarPoint::y() const {
  // @@protoc_insertion_point(field_get:PuzzleGameMsg.PlanarPoint.y)
  return y_;
}
inline void PlanarPoint::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:PuzzleGameMsg.PlanarPoint.y)
}

// -------------------------------------------------------------------

// Unity2Ubuntu

// repeated .PuzzleGameMsg.PlanarPoint point_cut = 1;
inline int Unity2Ubuntu::point_cut_size() const {
  return point_cut_.size();
}
inline void Unity2Ubuntu::clear_point_cut() {
  point_cut_.Clear();
}
inline ::PuzzleGameMsg::PlanarPoint* Unity2Ubuntu::mutable_point_cut(int index) {
  // @@protoc_insertion_point(field_mutable:PuzzleGameMsg.Unity2Ubuntu.point_cut)
  return point_cut_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PuzzleGameMsg::PlanarPoint >*
Unity2Ubuntu::mutable_point_cut() {
  // @@protoc_insertion_point(field_mutable_list:PuzzleGameMsg.Unity2Ubuntu.point_cut)
  return &point_cut_;
}
inline const ::PuzzleGameMsg::PlanarPoint& Unity2Ubuntu::point_cut(int index) const {
  // @@protoc_insertion_point(field_get:PuzzleGameMsg.Unity2Ubuntu.point_cut)
  return point_cut_.Get(index);
}
inline ::PuzzleGameMsg::PlanarPoint* Unity2Ubuntu::add_point_cut() {
  // @@protoc_insertion_point(field_add:PuzzleGameMsg.Unity2Ubuntu.point_cut)
  return point_cut_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PuzzleGameMsg::PlanarPoint >&
Unity2Ubuntu::point_cut() const {
  // @@protoc_insertion_point(field_list:PuzzleGameMsg.Unity2Ubuntu.point_cut)
  return point_cut_;
}

// repeated .PuzzleGameMsg.PlanarPoint point_center = 2;
inline int Unity2Ubuntu::point_center_size() const {
  return point_center_.size();
}
inline void Unity2Ubuntu::clear_point_center() {
  point_center_.Clear();
}
inline ::PuzzleGameMsg::PlanarPoint* Unity2Ubuntu::mutable_point_center(int index) {
  // @@protoc_insertion_point(field_mutable:PuzzleGameMsg.Unity2Ubuntu.point_center)
  return point_center_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PuzzleGameMsg::PlanarPoint >*
Unity2Ubuntu::mutable_point_center() {
  // @@protoc_insertion_point(field_mutable_list:PuzzleGameMsg.Unity2Ubuntu.point_center)
  return &point_center_;
}
inline const ::PuzzleGameMsg::PlanarPoint& Unity2Ubuntu::point_center(int index) const {
  // @@protoc_insertion_point(field_get:PuzzleGameMsg.Unity2Ubuntu.point_center)
  return point_center_.Get(index);
}
inline ::PuzzleGameMsg::PlanarPoint* Unity2Ubuntu::add_point_center() {
  // @@protoc_insertion_point(field_add:PuzzleGameMsg.Unity2Ubuntu.point_center)
  return point_center_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PuzzleGameMsg::PlanarPoint >&
Unity2Ubuntu::point_center() const {
  // @@protoc_insertion_point(field_list:PuzzleGameMsg.Unity2Ubuntu.point_center)
  return point_center_;
}

// repeated .PuzzleGameMsg.PlanarPoint point_target = 3;
inline int Unity2Ubuntu::point_target_size() const {
  return point_target_.size();
}
inline void Unity2Ubuntu::clear_point_target() {
  point_target_.Clear();
}
inline ::PuzzleGameMsg::PlanarPoint* Unity2Ubuntu::mutable_point_target(int index) {
  // @@protoc_insertion_point(field_mutable:PuzzleGameMsg.Unity2Ubuntu.point_target)
  return point_target_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PuzzleGameMsg::PlanarPoint >*
Unity2Ubuntu::mutable_point_target() {
  // @@protoc_insertion_point(field_mutable_list:PuzzleGameMsg.Unity2Ubuntu.point_target)
  return &point_target_;
}
inline const ::PuzzleGameMsg::PlanarPoint& Unity2Ubuntu::point_target(int index) const {
  // @@protoc_insertion_point(field_get:PuzzleGameMsg.Unity2Ubuntu.point_target)
  return point_target_.Get(index);
}
inline ::PuzzleGameMsg::PlanarPoint* Unity2Ubuntu::add_point_target() {
  // @@protoc_insertion_point(field_add:PuzzleGameMsg.Unity2Ubuntu.point_target)
  return point_target_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PuzzleGameMsg::PlanarPoint >&
Unity2Ubuntu::point_target() const {
  // @@protoc_insertion_point(field_list:PuzzleGameMsg.Unity2Ubuntu.point_target)
  return point_target_;
}

// repeated int32 data = 4;
inline int Unity2Ubuntu::data_size() const {
  return data_.size();
}
inline void Unity2Ubuntu::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::int32 Unity2Ubuntu::data(int index) const {
  // @@protoc_insertion_point(field_get:PuzzleGameMsg.Unity2Ubuntu.data)
  return data_.Get(index);
}
inline void Unity2Ubuntu::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:PuzzleGameMsg.Unity2Ubuntu.data)
}
inline void Unity2Ubuntu::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:PuzzleGameMsg.Unity2Ubuntu.data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Unity2Ubuntu::data() const {
  // @@protoc_insertion_point(field_list:PuzzleGameMsg.Unity2Ubuntu.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Unity2Ubuntu::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:PuzzleGameMsg.Unity2Ubuntu.data)
  return &data_;
}

// -------------------------------------------------------------------

// Ubuntu2Unity

// repeated float tcp_pose = 1;
inline int Ubuntu2Unity::tcp_pose_size() const {
  return tcp_pose_.size();
}
inline void Ubuntu2Unity::clear_tcp_pose() {
  tcp_pose_.Clear();
}
inline float Ubuntu2Unity::tcp_pose(int index) const {
  // @@protoc_insertion_point(field_get:PuzzleGameMsg.Ubuntu2Unity.tcp_pose)
  return tcp_pose_.Get(index);
}
inline void Ubuntu2Unity::set_tcp_pose(int index, float value) {
  tcp_pose_.Set(index, value);
  // @@protoc_insertion_point(field_set:PuzzleGameMsg.Ubuntu2Unity.tcp_pose)
}
inline void Ubuntu2Unity::add_tcp_pose(float value) {
  tcp_pose_.Add(value);
  // @@protoc_insertion_point(field_add:PuzzleGameMsg.Ubuntu2Unity.tcp_pose)
}
inline const ::google::protobuf::RepeatedField< float >&
Ubuntu2Unity::tcp_pose() const {
  // @@protoc_insertion_point(field_list:PuzzleGameMsg.Ubuntu2Unity.tcp_pose)
  return tcp_pose_;
}
inline ::google::protobuf::RepeatedField< float >*
Ubuntu2Unity::mutable_tcp_pose() {
  // @@protoc_insertion_point(field_mutable_list:PuzzleGameMsg.Ubuntu2Unity.tcp_pose)
  return &tcp_pose_;
}

// float sensor_force_z = 3;
inline void Ubuntu2Unity::clear_sensor_force_z() {
  sensor_force_z_ = 0;
}
inline float Ubuntu2Unity::sensor_force_z() const {
  // @@protoc_insertion_point(field_get:PuzzleGameMsg.Ubuntu2Unity.sensor_force_z)
  return sensor_force_z_;
}
inline void Ubuntu2Unity::set_sensor_force_z(float value) {
  
  sensor_force_z_ = value;
  // @@protoc_insertion_point(field_set:PuzzleGameMsg.Ubuntu2Unity.sensor_force_z)
}

// .PuzzleGameMsg.TcpState tcp_state = 2;
inline void Ubuntu2Unity::clear_tcp_state() {
  tcp_state_ = 0;
}
inline ::PuzzleGameMsg::TcpState Ubuntu2Unity::tcp_state() const {
  // @@protoc_insertion_point(field_get:PuzzleGameMsg.Ubuntu2Unity.tcp_state)
  return static_cast< ::PuzzleGameMsg::TcpState >(tcp_state_);
}
inline void Ubuntu2Unity::set_tcp_state(::PuzzleGameMsg::TcpState value) {
  
  tcp_state_ = value;
  // @@protoc_insertion_point(field_set:PuzzleGameMsg.Ubuntu2Unity.tcp_state)
}

// double game_length = 5;
inline void Ubuntu2Unity::clear_game_length() {
  game_length_ = 0;
}
inline double Ubuntu2Unity::game_length() const {
  // @@protoc_insertion_point(field_get:PuzzleGameMsg.Ubuntu2Unity.game_length)
  return game_length_;
}
inline void Ubuntu2Unity::set_game_length(double value) {
  
  game_length_ = value;
  // @@protoc_insertion_point(field_set:PuzzleGameMsg.Ubuntu2Unity.game_length)
}

// .PuzzleGameMsg.GameResult game_result = 4;
inline void Ubuntu2Unity::clear_game_result() {
  game_result_ = 0;
}
inline ::PuzzleGameMsg::GameResult Ubuntu2Unity::game_result() const {
  // @@protoc_insertion_point(field_get:PuzzleGameMsg.Ubuntu2Unity.game_result)
  return static_cast< ::PuzzleGameMsg::GameResult >(game_result_);
}
inline void Ubuntu2Unity::set_game_result(::PuzzleGameMsg::GameResult value) {
  
  game_result_ = value;
  // @@protoc_insertion_point(field_set:PuzzleGameMsg.Ubuntu2Unity.game_result)
}

// float game_score = 6;
inline void Ubuntu2Unity::clear_game_score() {
  game_score_ = 0;
}
inline float Ubuntu2Unity::game_score() const {
  // @@protoc_insertion_point(field_get:PuzzleGameMsg.Ubuntu2Unity.game_score)
  return game_score_;
}
inline void Ubuntu2Unity::set_game_score(float value) {
  
  game_score_ = value;
  // @@protoc_insertion_point(field_set:PuzzleGameMsg.Ubuntu2Unity.game_score)
}

// .PuzzleGameMsg.GameReplayState game_replay_state = 7;
inline void Ubuntu2Unity::clear_game_replay_state() {
  game_replay_state_ = 0;
}
inline ::PuzzleGameMsg::GameReplayState Ubuntu2Unity::game_replay_state() const {
  // @@protoc_insertion_point(field_get:PuzzleGameMsg.Ubuntu2Unity.game_replay_state)
  return static_cast< ::PuzzleGameMsg::GameReplayState >(game_replay_state_);
}
inline void Ubuntu2Unity::set_game_replay_state(::PuzzleGameMsg::GameReplayState value) {
  
  game_replay_state_ = value;
  // @@protoc_insertion_point(field_set:PuzzleGameMsg.Ubuntu2Unity.game_replay_state)
}

// .PuzzleGameMsg.GameDeviceType game_device = 8;
inline void Ubuntu2Unity::clear_game_device() {
  game_device_ = 0;
}
inline ::PuzzleGameMsg::GameDeviceType Ubuntu2Unity::game_device() const {
  // @@protoc_insertion_point(field_get:PuzzleGameMsg.Ubuntu2Unity.game_device)
  return static_cast< ::PuzzleGameMsg::GameDeviceType >(game_device_);
}
inline void Ubuntu2Unity::set_game_device(::PuzzleGameMsg::GameDeviceType value) {
  
  game_device_ = value;
  // @@protoc_insertion_point(field_set:PuzzleGameMsg.Ubuntu2Unity.game_device)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PuzzleGameMsg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::PuzzleGameMsg::TcpState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PuzzleGameMsg::TcpState>() {
  return ::PuzzleGameMsg::TcpState_descriptor();
}
template <> struct is_proto_enum< ::PuzzleGameMsg::GameResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PuzzleGameMsg::GameResult>() {
  return ::PuzzleGameMsg::GameResult_descriptor();
}
template <> struct is_proto_enum< ::PuzzleGameMsg::GameReplayState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PuzzleGameMsg::GameReplayState>() {
  return ::PuzzleGameMsg::GameReplayState_descriptor();
}
template <> struct is_proto_enum< ::PuzzleGameMsg::GameDeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PuzzleGameMsg::GameDeviceType>() {
  return ::PuzzleGameMsg::GameDeviceType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_puzzle_5fgame_5fmsg_2eproto
