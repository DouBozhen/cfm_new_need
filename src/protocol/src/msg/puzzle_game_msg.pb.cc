// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: puzzle_game_msg.proto

#include "puzzle_game_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_puzzle_5fgame_5fmsg_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_puzzle_5fgame_5fmsg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlanarPoint;
}  // namespace protobuf_puzzle_5fgame_5fmsg_2eproto
namespace PuzzleGameMsg {
class PlanarPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlanarPoint>
      _instance;
} _PlanarPoint_default_instance_;
class Unity2UbuntuDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Unity2Ubuntu>
      _instance;
} _Unity2Ubuntu_default_instance_;
class Ubuntu2UnityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ubuntu2Unity>
      _instance;
} _Ubuntu2Unity_default_instance_;
}  // namespace PuzzleGameMsg
namespace protobuf_puzzle_5fgame_5fmsg_2eproto {
static void InitDefaultsPlanarPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PuzzleGameMsg::_PlanarPoint_default_instance_;
    new (ptr) ::PuzzleGameMsg::PlanarPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PuzzleGameMsg::PlanarPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlanarPoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlanarPoint}, {}};

static void InitDefaultsUnity2Ubuntu() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PuzzleGameMsg::_Unity2Ubuntu_default_instance_;
    new (ptr) ::PuzzleGameMsg::Unity2Ubuntu();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PuzzleGameMsg::Unity2Ubuntu::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Unity2Ubuntu =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUnity2Ubuntu}, {
      &protobuf_puzzle_5fgame_5fmsg_2eproto::scc_info_PlanarPoint.base,}};

static void InitDefaultsUbuntu2Unity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PuzzleGameMsg::_Ubuntu2Unity_default_instance_;
    new (ptr) ::PuzzleGameMsg::Ubuntu2Unity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PuzzleGameMsg::Ubuntu2Unity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Ubuntu2Unity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUbuntu2Unity}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PlanarPoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Unity2Ubuntu.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ubuntu2Unity.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PuzzleGameMsg::PlanarPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PuzzleGameMsg::PlanarPoint, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PuzzleGameMsg::PlanarPoint, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PuzzleGameMsg::Unity2Ubuntu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PuzzleGameMsg::Unity2Ubuntu, point_cut_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PuzzleGameMsg::Unity2Ubuntu, point_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PuzzleGameMsg::Unity2Ubuntu, point_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PuzzleGameMsg::Unity2Ubuntu, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PuzzleGameMsg::Ubuntu2Unity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PuzzleGameMsg::Ubuntu2Unity, tcp_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PuzzleGameMsg::Ubuntu2Unity, sensor_force_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PuzzleGameMsg::Ubuntu2Unity, tcp_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PuzzleGameMsg::Ubuntu2Unity, game_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PuzzleGameMsg::Ubuntu2Unity, game_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PuzzleGameMsg::Ubuntu2Unity, game_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PuzzleGameMsg::Ubuntu2Unity, game_replay_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PuzzleGameMsg::Ubuntu2Unity, game_device_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PuzzleGameMsg::PlanarPoint)},
  { 7, -1, sizeof(::PuzzleGameMsg::Unity2Ubuntu)},
  { 16, -1, sizeof(::PuzzleGameMsg::Ubuntu2Unity)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::PuzzleGameMsg::_PlanarPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::PuzzleGameMsg::_Unity2Ubuntu_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::PuzzleGameMsg::_Ubuntu2Unity_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "puzzle_game_msg.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025puzzle_game_msg.proto\022\rPuzzleGameMsg\"#"
      "\n\013PlanarPoint\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"\257\001\n\014"
      "Unity2Ubuntu\022-\n\tpoint_cut\030\001 \003(\0132\032.Puzzle"
      "GameMsg.PlanarPoint\0220\n\014point_center\030\002 \003("
      "\0132\032.PuzzleGameMsg.PlanarPoint\0220\n\014point_t"
      "arget\030\003 \003(\0132\032.PuzzleGameMsg.PlanarPoint\022"
      "\014\n\004data\030\004 \003(\005\"\254\002\n\014Ubuntu2Unity\022\020\n\010tcp_po"
      "se\030\001 \003(\002\022\026\n\016sensor_force_z\030\003 \001(\002\022*\n\ttcp_"
      "state\030\002 \001(\0162\027.PuzzleGameMsg.TcpState\022\023\n\013"
      "game_length\030\005 \001(\001\022.\n\013game_result\030\004 \001(\0162\031"
      ".PuzzleGameMsg.GameResult\022\022\n\ngame_score\030"
      "\006 \001(\002\0229\n\021game_replay_state\030\007 \001(\0162\036.Puzzl"
      "eGameMsg.GameReplayState\0222\n\013game_device\030"
      "\010 \001(\0162\035.PuzzleGameMsg.GameDeviceType*2\n\010"
      "TcpState\022\014\n\010TCP_HANG\020\000\022\n\n\006TCP_UP\020\001\022\014\n\010TC"
      "P_DOWN\020\002*+\n\nGameResult\022\n\n\006GAMING\020\000\022\007\n\003WI"
      "N\020\001\022\010\n\004LOSE\020\002*\?\n\017GameReplayState\022\013\n\007PLAY"
      "ING\020\000\022\010\n\004BACK\020\001\022\n\n\006REPLAY\020\002\022\t\n\005PAUSE\020\003*$"
      "\n\016GameDeviceType\022\006\n\002VR\020\000\022\n\n\006SCREEN\020\001b\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 764);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "puzzle_game_msg.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_puzzle_5fgame_5fmsg_2eproto
namespace PuzzleGameMsg {
const ::google::protobuf::EnumDescriptor* TcpState_descriptor() {
  protobuf_puzzle_5fgame_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_puzzle_5fgame_5fmsg_2eproto::file_level_enum_descriptors[0];
}
bool TcpState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GameResult_descriptor() {
  protobuf_puzzle_5fgame_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_puzzle_5fgame_5fmsg_2eproto::file_level_enum_descriptors[1];
}
bool GameResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GameReplayState_descriptor() {
  protobuf_puzzle_5fgame_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_puzzle_5fgame_5fmsg_2eproto::file_level_enum_descriptors[2];
}
bool GameReplayState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GameDeviceType_descriptor() {
  protobuf_puzzle_5fgame_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_puzzle_5fgame_5fmsg_2eproto::file_level_enum_descriptors[3];
}
bool GameDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PlanarPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanarPoint::kXFieldNumber;
const int PlanarPoint::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanarPoint::PlanarPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_puzzle_5fgame_5fmsg_2eproto::scc_info_PlanarPoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PuzzleGameMsg.PlanarPoint)
}
PlanarPoint::PlanarPoint(const PlanarPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:PuzzleGameMsg.PlanarPoint)
}

void PlanarPoint::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

PlanarPoint::~PlanarPoint() {
  // @@protoc_insertion_point(destructor:PuzzleGameMsg.PlanarPoint)
  SharedDtor();
}

void PlanarPoint::SharedDtor() {
}

void PlanarPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlanarPoint::descriptor() {
  ::protobuf_puzzle_5fgame_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_puzzle_5fgame_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanarPoint& PlanarPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_puzzle_5fgame_5fmsg_2eproto::scc_info_PlanarPoint.base);
  return *internal_default_instance();
}


void PlanarPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:PuzzleGameMsg.PlanarPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool PlanarPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PuzzleGameMsg.PlanarPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PuzzleGameMsg.PlanarPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PuzzleGameMsg.PlanarPoint)
  return false;
#undef DO_
}

void PlanarPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PuzzleGameMsg.PlanarPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PuzzleGameMsg.PlanarPoint)
}

::google::protobuf::uint8* PlanarPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PuzzleGameMsg.PlanarPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PuzzleGameMsg.PlanarPoint)
  return target;
}

size_t PlanarPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PuzzleGameMsg.PlanarPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanarPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PuzzleGameMsg.PlanarPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanarPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanarPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PuzzleGameMsg.PlanarPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PuzzleGameMsg.PlanarPoint)
    MergeFrom(*source);
  }
}

void PlanarPoint::MergeFrom(const PlanarPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PuzzleGameMsg.PlanarPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void PlanarPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PuzzleGameMsg.PlanarPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanarPoint::CopyFrom(const PlanarPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PuzzleGameMsg.PlanarPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanarPoint::IsInitialized() const {
  return true;
}

void PlanarPoint::Swap(PlanarPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanarPoint::InternalSwap(PlanarPoint* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlanarPoint::GetMetadata() const {
  protobuf_puzzle_5fgame_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_puzzle_5fgame_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Unity2Ubuntu::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Unity2Ubuntu::kPointCutFieldNumber;
const int Unity2Ubuntu::kPointCenterFieldNumber;
const int Unity2Ubuntu::kPointTargetFieldNumber;
const int Unity2Ubuntu::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Unity2Ubuntu::Unity2Ubuntu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_puzzle_5fgame_5fmsg_2eproto::scc_info_Unity2Ubuntu.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PuzzleGameMsg.Unity2Ubuntu)
}
Unity2Ubuntu::Unity2Ubuntu(const Unity2Ubuntu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      point_cut_(from.point_cut_),
      point_center_(from.point_center_),
      point_target_(from.point_target_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PuzzleGameMsg.Unity2Ubuntu)
}

void Unity2Ubuntu::SharedCtor() {
}

Unity2Ubuntu::~Unity2Ubuntu() {
  // @@protoc_insertion_point(destructor:PuzzleGameMsg.Unity2Ubuntu)
  SharedDtor();
}

void Unity2Ubuntu::SharedDtor() {
}

void Unity2Ubuntu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Unity2Ubuntu::descriptor() {
  ::protobuf_puzzle_5fgame_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_puzzle_5fgame_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Unity2Ubuntu& Unity2Ubuntu::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_puzzle_5fgame_5fmsg_2eproto::scc_info_Unity2Ubuntu.base);
  return *internal_default_instance();
}


void Unity2Ubuntu::Clear() {
// @@protoc_insertion_point(message_clear_start:PuzzleGameMsg.Unity2Ubuntu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_cut_.Clear();
  point_center_.Clear();
  point_target_.Clear();
  data_.Clear();
  _internal_metadata_.Clear();
}

bool Unity2Ubuntu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PuzzleGameMsg.Unity2Ubuntu)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PuzzleGameMsg.PlanarPoint point_cut = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_point_cut()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PuzzleGameMsg.PlanarPoint point_center = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_point_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PuzzleGameMsg.PlanarPoint point_target = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_point_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PuzzleGameMsg.Unity2Ubuntu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PuzzleGameMsg.Unity2Ubuntu)
  return false;
#undef DO_
}

void Unity2Ubuntu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PuzzleGameMsg.Unity2Ubuntu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PuzzleGameMsg.PlanarPoint point_cut = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_cut_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->point_cut(static_cast<int>(i)),
      output);
  }

  // repeated .PuzzleGameMsg.PlanarPoint point_center = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_center_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->point_center(static_cast<int>(i)),
      output);
  }

  // repeated .PuzzleGameMsg.PlanarPoint point_target = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_target_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->point_target(static_cast<int>(i)),
      output);
  }

  // repeated int32 data = 4;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _data_cached_byte_size_));
  }
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->data(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PuzzleGameMsg.Unity2Ubuntu)
}

::google::protobuf::uint8* Unity2Ubuntu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PuzzleGameMsg.Unity2Ubuntu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PuzzleGameMsg.PlanarPoint point_cut = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_cut_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->point_cut(static_cast<int>(i)), deterministic, target);
  }

  // repeated .PuzzleGameMsg.PlanarPoint point_center = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_center_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->point_center(static_cast<int>(i)), deterministic, target);
  }

  // repeated .PuzzleGameMsg.PlanarPoint point_target = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_target_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->point_target(static_cast<int>(i)), deterministic, target);
  }

  // repeated int32 data = 4;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->data_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PuzzleGameMsg.Unity2Ubuntu)
  return target;
}

size_t Unity2Ubuntu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PuzzleGameMsg.Unity2Ubuntu)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .PuzzleGameMsg.PlanarPoint point_cut = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->point_cut_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->point_cut(static_cast<int>(i)));
    }
  }

  // repeated .PuzzleGameMsg.PlanarPoint point_center = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->point_center_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->point_center(static_cast<int>(i)));
    }
  }

  // repeated .PuzzleGameMsg.PlanarPoint point_target = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->point_target_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->point_target(static_cast<int>(i)));
    }
  }

  // repeated int32 data = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Unity2Ubuntu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PuzzleGameMsg.Unity2Ubuntu)
  GOOGLE_DCHECK_NE(&from, this);
  const Unity2Ubuntu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Unity2Ubuntu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PuzzleGameMsg.Unity2Ubuntu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PuzzleGameMsg.Unity2Ubuntu)
    MergeFrom(*source);
  }
}

void Unity2Ubuntu::MergeFrom(const Unity2Ubuntu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PuzzleGameMsg.Unity2Ubuntu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_cut_.MergeFrom(from.point_cut_);
  point_center_.MergeFrom(from.point_center_);
  point_target_.MergeFrom(from.point_target_);
  data_.MergeFrom(from.data_);
}

void Unity2Ubuntu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PuzzleGameMsg.Unity2Ubuntu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unity2Ubuntu::CopyFrom(const Unity2Ubuntu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PuzzleGameMsg.Unity2Ubuntu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unity2Ubuntu::IsInitialized() const {
  return true;
}

void Unity2Ubuntu::Swap(Unity2Ubuntu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Unity2Ubuntu::InternalSwap(Unity2Ubuntu* other) {
  using std::swap;
  CastToBase(&point_cut_)->InternalSwap(CastToBase(&other->point_cut_));
  CastToBase(&point_center_)->InternalSwap(CastToBase(&other->point_center_));
  CastToBase(&point_target_)->InternalSwap(CastToBase(&other->point_target_));
  data_.InternalSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Unity2Ubuntu::GetMetadata() const {
  protobuf_puzzle_5fgame_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_puzzle_5fgame_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ubuntu2Unity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ubuntu2Unity::kTcpPoseFieldNumber;
const int Ubuntu2Unity::kSensorForceZFieldNumber;
const int Ubuntu2Unity::kTcpStateFieldNumber;
const int Ubuntu2Unity::kGameLengthFieldNumber;
const int Ubuntu2Unity::kGameResultFieldNumber;
const int Ubuntu2Unity::kGameScoreFieldNumber;
const int Ubuntu2Unity::kGameReplayStateFieldNumber;
const int Ubuntu2Unity::kGameDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ubuntu2Unity::Ubuntu2Unity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_puzzle_5fgame_5fmsg_2eproto::scc_info_Ubuntu2Unity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PuzzleGameMsg.Ubuntu2Unity)
}
Ubuntu2Unity::Ubuntu2Unity(const Ubuntu2Unity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tcp_pose_(from.tcp_pose_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tcp_state_, &from.tcp_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_device_) -
    reinterpret_cast<char*>(&tcp_state_)) + sizeof(game_device_));
  // @@protoc_insertion_point(copy_constructor:PuzzleGameMsg.Ubuntu2Unity)
}

void Ubuntu2Unity::SharedCtor() {
  ::memset(&tcp_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_device_) -
      reinterpret_cast<char*>(&tcp_state_)) + sizeof(game_device_));
}

Ubuntu2Unity::~Ubuntu2Unity() {
  // @@protoc_insertion_point(destructor:PuzzleGameMsg.Ubuntu2Unity)
  SharedDtor();
}

void Ubuntu2Unity::SharedDtor() {
}

void Ubuntu2Unity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ubuntu2Unity::descriptor() {
  ::protobuf_puzzle_5fgame_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_puzzle_5fgame_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ubuntu2Unity& Ubuntu2Unity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_puzzle_5fgame_5fmsg_2eproto::scc_info_Ubuntu2Unity.base);
  return *internal_default_instance();
}


void Ubuntu2Unity::Clear() {
// @@protoc_insertion_point(message_clear_start:PuzzleGameMsg.Ubuntu2Unity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tcp_pose_.Clear();
  ::memset(&tcp_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_device_) -
      reinterpret_cast<char*>(&tcp_state_)) + sizeof(game_device_));
  _internal_metadata_.Clear();
}

bool Ubuntu2Unity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PuzzleGameMsg.Ubuntu2Unity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float tcp_pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tcp_pose())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_tcp_pose())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PuzzleGameMsg.TcpState tcp_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tcp_state(static_cast< ::PuzzleGameMsg::TcpState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sensor_force_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sensor_force_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PuzzleGameMsg.GameResult game_result = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_game_result(static_cast< ::PuzzleGameMsg::GameResult >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double game_length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &game_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float game_score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &game_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PuzzleGameMsg.GameReplayState game_replay_state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_game_replay_state(static_cast< ::PuzzleGameMsg::GameReplayState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PuzzleGameMsg.GameDeviceType game_device = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_game_device(static_cast< ::PuzzleGameMsg::GameDeviceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PuzzleGameMsg.Ubuntu2Unity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PuzzleGameMsg.Ubuntu2Unity)
  return false;
#undef DO_
}

void Ubuntu2Unity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PuzzleGameMsg.Ubuntu2Unity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tcp_pose = 1;
  if (this->tcp_pose_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _tcp_pose_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->tcp_pose().data(), this->tcp_pose_size(), output);
  }

  // .PuzzleGameMsg.TcpState tcp_state = 2;
  if (this->tcp_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tcp_state(), output);
  }

  // float sensor_force_z = 3;
  if (this->sensor_force_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sensor_force_z(), output);
  }

  // .PuzzleGameMsg.GameResult game_result = 4;
  if (this->game_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->game_result(), output);
  }

  // double game_length = 5;
  if (this->game_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->game_length(), output);
  }

  // float game_score = 6;
  if (this->game_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->game_score(), output);
  }

  // .PuzzleGameMsg.GameReplayState game_replay_state = 7;
  if (this->game_replay_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->game_replay_state(), output);
  }

  // .PuzzleGameMsg.GameDeviceType game_device = 8;
  if (this->game_device() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->game_device(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PuzzleGameMsg.Ubuntu2Unity)
}

::google::protobuf::uint8* Ubuntu2Unity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PuzzleGameMsg.Ubuntu2Unity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tcp_pose = 1;
  if (this->tcp_pose_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _tcp_pose_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tcp_pose_, target);
  }

  // .PuzzleGameMsg.TcpState tcp_state = 2;
  if (this->tcp_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tcp_state(), target);
  }

  // float sensor_force_z = 3;
  if (this->sensor_force_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sensor_force_z(), target);
  }

  // .PuzzleGameMsg.GameResult game_result = 4;
  if (this->game_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->game_result(), target);
  }

  // double game_length = 5;
  if (this->game_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->game_length(), target);
  }

  // float game_score = 6;
  if (this->game_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->game_score(), target);
  }

  // .PuzzleGameMsg.GameReplayState game_replay_state = 7;
  if (this->game_replay_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->game_replay_state(), target);
  }

  // .PuzzleGameMsg.GameDeviceType game_device = 8;
  if (this->game_device() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->game_device(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PuzzleGameMsg.Ubuntu2Unity)
  return target;
}

size_t Ubuntu2Unity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PuzzleGameMsg.Ubuntu2Unity)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float tcp_pose = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tcp_pose_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tcp_pose_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .PuzzleGameMsg.TcpState tcp_state = 2;
  if (this->tcp_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcp_state());
  }

  // float sensor_force_z = 3;
  if (this->sensor_force_z() != 0) {
    total_size += 1 + 4;
  }

  // double game_length = 5;
  if (this->game_length() != 0) {
    total_size += 1 + 8;
  }

  // .PuzzleGameMsg.GameResult game_result = 4;
  if (this->game_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_result());
  }

  // float game_score = 6;
  if (this->game_score() != 0) {
    total_size += 1 + 4;
  }

  // .PuzzleGameMsg.GameReplayState game_replay_state = 7;
  if (this->game_replay_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_replay_state());
  }

  // .PuzzleGameMsg.GameDeviceType game_device = 8;
  if (this->game_device() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ubuntu2Unity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PuzzleGameMsg.Ubuntu2Unity)
  GOOGLE_DCHECK_NE(&from, this);
  const Ubuntu2Unity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ubuntu2Unity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PuzzleGameMsg.Ubuntu2Unity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PuzzleGameMsg.Ubuntu2Unity)
    MergeFrom(*source);
  }
}

void Ubuntu2Unity::MergeFrom(const Ubuntu2Unity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PuzzleGameMsg.Ubuntu2Unity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tcp_pose_.MergeFrom(from.tcp_pose_);
  if (from.tcp_state() != 0) {
    set_tcp_state(from.tcp_state());
  }
  if (from.sensor_force_z() != 0) {
    set_sensor_force_z(from.sensor_force_z());
  }
  if (from.game_length() != 0) {
    set_game_length(from.game_length());
  }
  if (from.game_result() != 0) {
    set_game_result(from.game_result());
  }
  if (from.game_score() != 0) {
    set_game_score(from.game_score());
  }
  if (from.game_replay_state() != 0) {
    set_game_replay_state(from.game_replay_state());
  }
  if (from.game_device() != 0) {
    set_game_device(from.game_device());
  }
}

void Ubuntu2Unity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PuzzleGameMsg.Ubuntu2Unity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ubuntu2Unity::CopyFrom(const Ubuntu2Unity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PuzzleGameMsg.Ubuntu2Unity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ubuntu2Unity::IsInitialized() const {
  return true;
}

void Ubuntu2Unity::Swap(Ubuntu2Unity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ubuntu2Unity::InternalSwap(Ubuntu2Unity* other) {
  using std::swap;
  tcp_pose_.InternalSwap(&other->tcp_pose_);
  swap(tcp_state_, other->tcp_state_);
  swap(sensor_force_z_, other->sensor_force_z_);
  swap(game_length_, other->game_length_);
  swap(game_result_, other->game_result_);
  swap(game_score_, other->game_score_);
  swap(game_replay_state_, other->game_replay_state_);
  swap(game_device_, other->game_device_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ubuntu2Unity::GetMetadata() const {
  protobuf_puzzle_5fgame_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_puzzle_5fgame_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace PuzzleGameMsg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PuzzleGameMsg::PlanarPoint* Arena::CreateMaybeMessage< ::PuzzleGameMsg::PlanarPoint >(Arena* arena) {
  return Arena::CreateInternal< ::PuzzleGameMsg::PlanarPoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PuzzleGameMsg::Unity2Ubuntu* Arena::CreateMaybeMessage< ::PuzzleGameMsg::Unity2Ubuntu >(Arena* arena) {
  return Arena::CreateInternal< ::PuzzleGameMsg::Unity2Ubuntu >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PuzzleGameMsg::Ubuntu2Unity* Arena::CreateMaybeMessage< ::PuzzleGameMsg::Ubuntu2Unity >(Arena* arena) {
  return Arena::CreateInternal< ::PuzzleGameMsg::Ubuntu2Unity >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
